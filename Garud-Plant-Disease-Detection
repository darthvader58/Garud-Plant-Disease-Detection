{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":182633,"sourceType":"datasetVersion","datasetId":78313}],"dockerImageVersionId":30042,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!ls /kaggle/input/new-plant-diseases-dataset/New\\ Plant\\ Diseases\\ Dataset\\(Augmented\\)/'New Plant Diseases Dataset(Augmented)'","metadata":{"trusted":true,"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport pickle\nimport numpy as np\nimport cv2\nfrom sklearn.preprocessing import LabelBinarizer\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation, Flatten, Dropout, Dense\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import img_to_array\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"img_size=(256,256)\nn_img=100\nroot_dir=\"/kaggle/input/new-plant-diseases-dataset/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)\"\ntrain_dir=os.path.join(root_dir,\"train\")\nval_dir=os.path.join(root_dir,\"valid\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def convert(img_dir):\n    try:\n        img=cv2.imread(img_dir)\n        if img is not None:\n            img=cv2.resize(img,img_size)\n            return img_to_array(img)\n        else:\n            return np.array([])\n    except:\n        print(\"Error!\")\n        return None","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"img_list=[]\nlabel_list=[]\ntry:\n    print(\"Loading images...\")\n    diseases_folders_list=os.listdir(train_dir)\n    for diseases_folder in diseases_folders_list:\n        print(f\"Processing {diseases_folder}...\")\n        diseases_images_list=os.listdir(f\"{train_dir}/{diseases_folder}/\")\n        for image in diseases_images_list[:n_img]:\n            image_directory=f\"{train_dir}/{diseases_folder}/{image}\"\n            if image_directory.endswith(\".jpg\")==True or image_directory.endswith(\".JPG\")==True:\n                img_list.append(convert(image_directory))\n                label_list.append(diseases_folder)\n    print(\"Images processed!\")\nexcept Exception as e:\n    print(f\"Error:{e}\")\nnp_img_list=np.array(img_list,dtype=np.float16)/225.0\nprint(\"Number of images processed:\",len(img_list))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"lb=LabelBinarizer()\nimg_labels=lb.fit_transform(label_list)\npickle.dump(lb,open(\"plant_disease_label_transform.pkl\",\"wb\"))\nprint(\"Number of classes:\",len(lb.classes_))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x_train,x_test,y_train,y_test=train_test_split(np_img_list,img_labels,test_size=0.2,random_state=42)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"augment=ImageDataGenerator(rotation_range=25,width_shift_range=0.1,height_shift_range=0.1,shear_range=0.2,zoom_range=0.2,horizontal_flip=True,fill_mode=\"nearest\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"EPOCHS=25\nsteps=100\nLR=1e-3\nbs=32\nheight=256\nwidth=256\ndepth=3","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model=Sequential()\ninputShape=(height,width,depth)\nchanDim=-1\nif K.image_data_format()==\"channels_first\":\n    inputShape=(depth,height,width)\n    chanDim=1\nmodel.add(Conv2D(32,(3,3),padding=\"same\",input_shape=inputShape))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(3,3)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64,(3,3),padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(128,(3,3),padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(1024))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\nmodel.add(Dense(len(lb.classes_)))\nmodel.add(Activation('softmax'))\nmodel.summary()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"o=Adam(lr=LR,decay=LR/EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\",optimizer=o,metrics=[\"accuracy\"])\nprint(\"Training model...\")\nhistory=model.fit_generator(augment.flow(x_train,y_train,batch_size=bs),validation_data=(x_test,y_test),steps_per_epoch=len(x_train)//bs,epochs=EPOCHS,verbose=1)","metadata":{"trusted":true,"_kg_hide-output":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"accuracy=history.history[\"accuracy\"]\nvalidation_accuracy=history.history[\"val_accuracy\"]\nloss=history.history[\"loss\"]\nvalidation_loss=history.history[\"val_loss\"]\nepochs=range(1,len(accuracy)+1)\nplt.plot(epochs,accuracy,\"b\",label=\"Training Accuracy\")\nplt.plot(epochs,validation_accuracy,\"r\",label=\"Validation Accuracy\")\nplt.title(\"Training and Validation Accuracy\")\nplt.legend()\nplt.figure()\nplt.plot(epochs,loss,\"b\",label=\"Training Loss\")\nplt.plot(epochs,validation_loss,\"r\",label=\"Validation Loss\")\nplt.title(\"Training and Validation Loss\")\nplt.legend()\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Calculating model accuracy...\")\nscore=model.evaluate(x_test,y_test)\nprint(f\"Test_Accuracy:{score[1]*100}\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!wget https://ohioline.osu.edu/sites/ohioline/files/imce/Plant_Pathology/PLNTPTH-CER-02_Figure_1.png","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!ls","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def predict(img_path):\n    img_arr=convert(img_path)\n    np_img=np.array(img_arr,dtype=np.float16)/255.0\n    np_img=np.expand_dims(np_img,0)\n    fig,ax=plt.subplots(1,1)\n    result=model.predict_classes(np_img)\n    plt.imshow(plt.imread(img_path))\n    print(\"Predicted:\",(lb.classes_[result][0]))\n    plt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import glob\nimages=glob.glob(\"*.png\")\nfor img in images:\n    predict(img)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}